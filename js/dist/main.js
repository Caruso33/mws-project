"use strict";let restaurants,neighborhoods,cuisines;var map,markers=[],lazyImages=[];const logging=!1;document.addEventListener("DOMContentLoaded",e=>{serviceWorker(),fetchNeighborhoods(),fetchCuisines()});const fetchNeighborhoods=()=>{window.localforage.getItem("restaurantData",function(e,t){t?self.restaurantList=t:DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})})},fillNeighborhoodsHTML=(e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const s=document.createElement("option");s.innerHTML=e,s.value=e,t.append(s)})},fetchCuisines=()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})},fillCuisinesHTML=(e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const s=document.createElement("option");s.innerHTML=e,s.value=e,t.append(s)})};window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1});google.maps.event.addListenerOnce(self.map,"idle",()=>{let e=document.querySelector("iframe");e.setAttribute("aria-hidden","true"),e.setAttribute("tabindex","-1")});updateRestaurants()});const updateRestaurants=()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),s=e.selectedIndex,r=t.selectedIndex,n=e[s].value,a=t[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(n,a,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})},resetRestaurants=e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e},fillRestaurantsHTML=(e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap(),lazyLoadImages()},createRestaurantHTML=e=>{const t=document.createElement("li"),s=document.createElement("figure"),r=document.createElement("img"),n=document.createElement("figcaption");s.className="restaurant-fig",r.className="restaurant-img",n.className="restaurant-figcap";const a=DBHelper.imageUrlForRestaurant(e);r.src="",r.alt=`An impression of restaurant ${e.name}`,n.innerHTML=`Restaurant ${e.name}`;const o=a.slice(0,-17);r["data-src"]=`${o}.webp`,r["data-srcset"]=`${o}-250_small-min.webp 250w,\n                  ${o}-400_medium-min.webp 400w`,r.sizes="(min-width: 434px) 300px, calc(100% - 137px)",s.append(r),s.append(n),t.append(s);const i=document.createElement("h2");i.innerHTML=e.name,t.append(i);const c=document.createElement("p");c.innerHTML=e.neighborhood,t.append(c);const l=document.createElement("p");l.innerHTML=e.address,t.append(l);const d=document.createElement("a");return d.innerHTML="View Details",d.href=DBHelper.urlForRestaurant(e),d.setAttribute("role","button"),d.setAttribute("aria-label",`Press to view details of restaurant ${e.name}`),t.append(d),t},addMarkersToMap=(e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})},lazyLoadImages=()=>{const e=[].slice.call(document.querySelectorAll(".restaurant-img"));if("IntersectionObserver"in window){let t=new IntersectionObserver(function(e,s){e.forEach(e=>{if(e.isIntersecting){let s=e.target;s.src=s["data-src"],s.srcset=s["data-srcset"],t.unobserve(s)}})});e.forEach(e=>{t.observe(e)})}else console.log("LazyLoadImages failed")},serviceWorker=()=>{navigator.serviceWorker&&navigator.serviceWorker.register("/service-worker.js",{scope:"/"}).then(e=>{0}).catch(e=>console.log("[ServiceWorker] registration failed!",e))};