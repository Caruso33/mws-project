"use strict";let restaurants,neighborhoods,cuisines;var map,markers=[],lazyImages=[];const logging=!1;document.addEventListener("DOMContentLoaded",e=>{serviceWorker(),fetchNeighborhoods(),fetchCuisines()});const fetchNeighborhoods=()=>{window.localStorage.getItem("restaurantData",(e,t)=>{t?self.restaurantList=t:DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})})},fillNeighborhoodsHTML=(e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const s=document.createElement("option");s.innerHTML=e,s.value=e,t.append(s)})},fetchCuisines=()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})},fillCuisinesHTML=(e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const s=document.createElement("option");s.innerHTML=e,s.value=e,t.append(s)})};window.initMap=(()=>{let e={lat:40.722216,lng:-73.987501};const t=document.createElement("img"),s="/img/webp/maps-";t.src=`${s}500.webp`,t.srcset=`${s}360.webp 360w, ${s}500.webp 500w, ${s}700.webp 700w, ${s}900.webp 900w, ${s}1200.webp 1200w, ${s}1600.webp 1600w`,t.alt="Google Maps Preview",t.setAttribute("tabindex","0");const n=document.getElementById("map");n.appendChild(t),n.addEventListener("click",t=>{self.map=new google.maps.Map(n,{zoom:12,center:e,scrollwheel:!1});google.maps.event.addListenerOnce(self.map,"idle",()=>{let e=document.querySelector("iframe");e.setAttribute("aria-hidden","true"),e.setAttribute("tabindex","-1")});updateRestaurants()},!0),updateRestaurants()});const updateRestaurants=()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),s=e.selectedIndex,n=t.selectedIndex,r=e[s].value,a=t[n].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(r,a,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})},resetRestaurants=e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e},fillRestaurantsHTML=(e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap(),lazyLoadImages()},createRestaurantHTML=e=>{const t=document.createElement("li"),s=document.createElement("span");e.is_favorite&&(s.innerHTML=`${String.fromCodePoint(127775)} This is a favorite`),t.append(s);const n=document.createElement("figure"),r=document.createElement("img"),a=document.createElement("figcaption");n.className="restaurant-fig",r.className="restaurant-img",a.className="restaurant-figcap";const o=DBHelper.imageUrlForRestaurant(e);r.src="",r.alt=`An impression of restaurant ${e.name}`,a.innerHTML=`Restaurant ${e.name}`;const i=o.slice(0,-17);r["data-src"]=`${i}.webp`,r["data-srcset"]=`${i}-250_small-min.webp 250w,\n                  ${i}-400_medium-min.webp 400w`,r.sizes="(min-width: 434px) 300px, calc(100% - 137px)",n.append(r),n.append(a),t.append(n);const c=document.createElement("h2");c.innerHTML=e.name,t.append(c);const l=document.createElement("p");l.innerHTML=e.neighborhood,t.append(l);const d=document.createElement("p");d.innerHTML=e.address,t.append(d);const u=document.createElement("a");return u.innerHTML="View Details",u.href=DBHelper.urlForRestaurant(e),u.setAttribute("role","button"),u.setAttribute("aria-label",`Press to view details of restaurant ${e.name}`),t.append(u),t},addMarkersToMap=(e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})},lazyLoadImages=()=>{const e=[].slice.call(document.querySelectorAll(".restaurant-img"));if("IntersectionObserver"in window){let t=new IntersectionObserver(function(e,s){e.forEach(e=>{if(e.isIntersecting){let s=e.target;s.src=s["data-src"],s.srcset=s["data-srcset"],t.unobserve(s)}})});e.forEach(e=>{t.observe(e)})}else console.log("LazyLoadImages failed")},serviceWorker=()=>{navigator.serviceWorker&&navigator.serviceWorker.register("/service-worker.js",{scope:"/"}).then(e=>{0}).catch(e=>console.log("[ServiceWorker] registration failed!",e))};